


-- PROCESOS

que init no se pueda matar, que limpie los recursos de los huerfanos

tener un proceso idle

implementar la nueva queue

la syscall de ps

hacer lo de los processos en foreground / background

-- SYNCRO

resolver los warnings en la medida de lo posible

agregar implementacion con la nueva queue

que cree semaforos para STDIN (el teclado) para que el read del teclado sea bloqueante como los pipes

no se que mas, magui es la CTO


-- PIPES

que existan los pipes

que el read sea bloqueante

refactor de procesos para que laburen con los pipes

testear 'con un cat hola | red' creando los procesos en userland



-- APLICACIONES DE USUARIO

rework de la shell para llamar programas pasandole argumentos

programas de usuario en carpeta user_programs

no tener memoria de lo que se escribio en la shell (agrandar o achicar la letra hace clear)

ponerle flechita para arriba guardando el ultimo comando

modularizar los .c de la usrlib, incluso agregando las funciones que usan los tests ahi

-- ESTILO

no usar size_t. Usar los tipos definidos en stdint

que el mm sea una libreria, no un adt (conlleva un lindo refactor a como se llama)

unificar criterio de los booleanos (int? uint8? stdbool?)





-- NON ESSENTIALS

hacer una syscall para que imprima el logo de ramOS en modo texto y ponerlo cuando arranca la shell

iterar sobre el videodriver y las syscalls (agregarle alguno de una matriz)

agregar que se pueda cambiar el color de fondo del modo texto y de la stdin / out

quizas agregar colores no? tipo file descriptors que sean colores para el videodriver no es mala.

hacer qeu corra el jueguito (con delta time)

hacer que corra el doom










